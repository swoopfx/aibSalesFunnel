<?php

namespace DoctrineORMModule\Proxy\__CG__\Application\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Uploads extends \Application\Entity\Uploads implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'id', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docName', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docUrl', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'createdOn', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'updatedOn', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'isHidden', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'mimeType', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docExt', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docCode'];
        }

        return ['__isInitialized__', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'id', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docName', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docUrl', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'createdOn', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'updatedOn', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'isHidden', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'mimeType', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docExt', '' . "\0" . 'Application\\Entity\\Uploads' . "\0" . 'docCode'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Uploads $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDocName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocName', []);

        return parent::getDocName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocName(string $docName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocName', [$docName]);

        return parent::setDocName($docName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocUrl', []);

        return parent::getDocUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocUrl(string $docUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocUrl', [$docUrl]);

        return parent::setDocUrl($docUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedOn', []);

        return parent::getCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedOn(\DateTime $createdOn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedOn', [$createdOn]);

        return parent::setCreatedOn($createdOn);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedOn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedOn', []);

        return parent::getUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedOn(\DateTime $updatedOn)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedOn', [$updatedOn]);

        return parent::setUpdatedOn($updatedOn);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsHidden()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsHidden', []);

        return parent::getIsHidden();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsHidden(bool $isHidden)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsHidden', [$isHidden]);

        return parent::setIsHidden($isHidden);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType(string $mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocExt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocExt', []);

        return parent::getDocExt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocExt(string $docExt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocExt', [$docExt]);

        return parent::setDocExt($docExt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocCode', []);

        return parent::getDocCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setDocCode(string $docCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDocCode', [$docCode]);

        return parent::setDocCode($docCode);
    }

}
